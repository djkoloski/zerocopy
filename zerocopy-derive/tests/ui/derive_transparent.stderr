error[E0432]: unresolved import `self::util::NotAsBytes`
  --> tests/ui/derive_transparent.rs:11:18
   |
11 | use self::util::{NotAsBytes, AU16};
   |                  ^^^^^^^^^^
   |                  |
   |                  no `NotAsBytes` in `util`
   |                  help: a similar name exists in the module: `AsBytes`

error[E0277]: the trait bound `NotAsBytes: AsBytes` is not satisfied
  --> tests/ui/../util.rs
   |
   |             const _: fn($ty) -> IsAsBytes<$ty> = IsAsBytes::<$ty>;
   |                                 ^^^^^^^^^^^^^^ the trait `AsBytes` is not implemented for `NotAsBytes`
   |
  ::: tests/ui/derive_transparent.rs:33:1
   |
33 | assert_is_as_bytes!(TransparentStruct<NotAsBytes>);
   | -------------------------------------------------- in this macro invocation
   |
   = help: the following other types implement trait `AsBytes`:
             ()
             AU16
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
           and $N others
note: required for `TransparentStruct<NotAsBytes>` to implement `AsBytes`
  --> tests/ui/derive_transparent.rs:20:10
   |
20 | #[derive(AsBytes, FromBytes, Unaligned)]
   |          ^^^^^^^
note: required by a bound in `IsAsBytes`
  --> tests/ui/../util.rs
   |
   |             struct IsAsBytes<T: zerocopy::AsBytes>(T);
   |                                 ^^^^^^^^^^^^^^^^^ required by this bound in `IsAsBytes`
   |
  ::: tests/ui/derive_transparent.rs:33:1
   |
33 | assert_is_as_bytes!(TransparentStruct<NotAsBytes>);
   | -------------------------------------------------- in this macro invocation
   = note: this error originates in the macro `assert_is_as_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `char: FromBytes` is not satisfied
  --> tests/ui/../util.rs
   |
   |             const _: fn($ty) -> IsFromBytes<$ty> = IsFromBytes::<$ty>;
   |                                 ^^^^^^^^^^^^^^^^ the trait `FromBytes` is not implemented for `char`
   |
  ::: tests/ui/derive_transparent.rs:34:1
   |
34 | assert_is_from_bytes!(TransparentStruct<char>);
   | ---------------------------------------------- in this macro invocation
   |
   = help: the following other types implement trait `FromBytes`:
             ()
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
             MaybeUninit<T>
           and $N others
note: required for `TransparentStruct<char>` to implement `FromBytes`
  --> tests/ui/derive_transparent.rs:20:19
   |
20 | #[derive(AsBytes, FromBytes, Unaligned)]
   |                   ^^^^^^^^^
note: required by a bound in `IsFromBytes`
  --> tests/ui/../util.rs
   |
   |             struct IsFromBytes<T: zerocopy::FromBytes>(T);
   |                                   ^^^^^^^^^^^^^^^^^^^ required by this bound in `IsFromBytes`
   |
  ::: tests/ui/derive_transparent.rs:34:1
   |
34 | assert_is_from_bytes!(TransparentStruct<char>);
   | ---------------------------------------------- in this macro invocation
   = note: this error originates in the macro `assert_is_from_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AU16: Unaligned` is not satisfied
  --> tests/ui/../util.rs
   |
   |             const _: fn($ty) -> IsUnaligned<$ty> = IsUnaligned::<$ty>;
   |                                 ^^^^^^^^^^^^^^^^ the trait `Unaligned` is not implemented for `AU16`
   |
  ::: tests/ui/derive_transparent.rs:35:1
   |
35 | assert_is_unaligned!(TransparentStruct<AU16>);
   | --------------------------------------------- in this macro invocation
   |
   = help: the following other types implement trait `Unaligned`:
             ()
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
             PhantomData<T>
           and $N others
note: required for `TransparentStruct<AU16>` to implement `Unaligned`
  --> tests/ui/derive_transparent.rs:20:30
   |
20 | #[derive(AsBytes, FromBytes, Unaligned)]
   |                              ^^^^^^^^^
note: required by a bound in `IsUnaligned`
  --> tests/ui/../util.rs
   |
   |             struct IsUnaligned<T: zerocopy::Unaligned>(T);
   |                                   ^^^^^^^^^^^^^^^^^^^ required by this bound in `IsUnaligned`
   |
  ::: tests/ui/derive_transparent.rs:35:1
   |
35 | assert_is_unaligned!(TransparentStruct<AU16>);
   | --------------------------------------------- in this macro invocation
   = note: this error originates in the macro `assert_is_unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)
